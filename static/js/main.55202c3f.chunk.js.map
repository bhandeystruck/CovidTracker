{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","MapContainer","scrollWheelZoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","children","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","isRedactive","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55202c3f.chunk.js","sourcesContent":["import { Card } from '@material-ui/core'\nimport React from 'react'\nimport { CardContent, Typography} from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\n    console.log(title, active);\n    return (\n      <Card\n        onClick={props.onClick}\n        className={`infoBox ${active && \"infoBox--selected\"} ${\n          isRed && \"infoBox--red\"\n        }`}\n      >\n        <CardContent>\n          <Typography color=\"textSecondary\" gutterBottom>\n            {title}\n          </Typography>\n          <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n            {cases}\n          </h2>\n  \n          <Typography className=\"infoBox__total\" color=\"textSecondary\">\n            {total} Total\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  export default InfoBox;","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n    return sortedData.sort((a,b) => (a.cases > b.cases ? -1:1));\n\n};\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));","import React from 'react';\nimport { MapContainer, TileLayer,} from 'react-leaflet'\nimport \"./Map.css\";\nimport { showDataOnMap } from './util';\n\nfunction Map({ countries, casesType, center, zoom }) {\n    return (\n        <div className=\"map\">\n        <MapContainer center={center} zoom={zoom} scrollWheelZoom={false}>\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n          {showDataOnMap(countries, casesType)}\n        </MapContainer>     \n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react'\nimport './Table.css';\nimport numeral from \"numeral\";\n\nfunction Table({countries}) {\n    return (\n        <div className=\"table\">\n        {/* Go through all of the countries and map them */}\n        {/* Destructuring the code so cases and country are separately stored */}\n        {countries.map(({country, cases}) => (\n            <tr>\n                <td>{country}</td>\n                <td><strong>{numeral(country.cases).format(\"0,0\")}</strong></td>\n            </tr>\n        ))}\n            \n        </div>\n    )\n}\n\nexport default Table\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType=\"cases\", ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.children}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;","import React from 'react';\nimport './App.css';\nimport FormControl from '@material-ui/core/FormControl';\nimport { Card, CardContent, MenuItem, Select } from '@material-ui/core';\nimport {useState, useEffect} from 'react';\nimport InfoBox from \"./InfoBox\";\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n\n\n  const [countries, setCountries] = useState([]);\n  //setting up default country for select icon\n  const [country, setCountry] = useState(\"worldwide\");\n\n  //country info state\n  const [countryInfo, setCountryInfo] = useState({});\n\n  //table data\n  const [tableData, setTableData] = useState([]);\n\n  const [mapCenter,setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n\n  const [mapZoom, setMapZoom] = useState(3);\n\n  const [mapCountries, setMapCountries] = useState([]);\n\n  const [casesType, setCasesType] = useState(\"cases\");\n\n\n    useEffect(() => {\n      fetch(\"https://disease.sh/v3/covid-19/countries/all\")\n      .then(response=> response.json())\n      .then(data=>{\n        setCountryInfo(data);\n      });\n    }, [])\n\n\n \n  //USE EFFECT = Runs code based on a given condition [] is the condition\n  //[] is left blank it will only run once when the app loads\n  //in our case we need the effect to run when the countries change\n  useEffect(() => {\n    //async -> send a request to the server, wait for it, do something with info\n    const getCountriesData = async () =>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      //take the response and get the json from the fetch response\n      .then((response) => response.json())\n      //then set the countries but need to restructure before storing\n      .then((data) =>{\n        //going through every country \n        //return a object with required\n        //here country is the object looped in\n        const countries = data.map((country) =>(\n          {\n            \n            name: country.country,\n            value: country.countryInfo.iso2,\n\n          }\n          \n          ));\n          //sorting the data here\n          const sortedData = sortData(data);\n          //put the countries we mapped through\n          setCountries(countries);\n          //getting the data for the table from this function\n          setTableData(sortedData);\n          setMapCountries(data);\n      });\n\n  \n\n    };\n    \n    //handling async call here by calling function again\n    getCountriesData();\n\n  \n  }, [countries]);\n\n\n\n  //OnCountryChange Function \n  //takes in an event e\n  const onCountryChange = async (e) =>{\n\n      //this stores the country we select\n      const countryCode = e.target.value;\n      \n      //Then we set the default value here for the select button\n      setCountry(countryCode);\n\n      //as here is where the country selection is handled\n      //I need to implement the getting the data part here\n      //https://disease.sh/v3/covid-19/all\n      //https://disease.sh/v3/covid-19/countries/{COUNTRY_CODE}\n      //need to implement : if country code is worldwide do that\n      //otherwise do the country code\n\n      //so if country code is worldwide we made this the url\n      const url = countryCode ==='worldwide' ? 'https://disease.sh/v3/covid-19/all' :\n      `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n      //go to the url\n      await fetch(url)\n        //once we  get the information \n        //turn it into json object\n        .then(response => response.json())\n        //then we do stuff with the data\n        .then(data=> {\n          //update the input \n          setCountry(countryCode);\n          //store the response of the country info into a variable\n          \n          setCountryInfo(data);\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n\n      });\n      \n  };\n\n\n\n\n\n  return (\n    <div className=\"app\">\n\n      {/* Application Left Side */}\n      <div className=\"app__left\">\n          {/* Header */}\n\n        {/* Title + Select input dropdown field */}\n\n        <div className=\"app__header\">\n          <h1>Covid 19 Tracker</h1>\n\n            <FormControl className=\"app_dropdown\">\n                  {/* Here value is set to worldwide as default to show in the select box */}\n                <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n                  {/* DropDown menu from material UI */}\n                  {/* Loop through all the countries and drop them down */}\n                  {/* <MenuItem value=\"worldwide\">worldwide</MenuItem> */}\n                  {/* JSX */}\n                  <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                  {\n                    countries.map(country=>(\n\n                      <MenuItem value={country.value}>{country.name}</MenuItem>\n                    ))\n                  }\n                </Select>\n            </FormControl>\n        </div>\n\n\n          {/*  */}\n        <div className=\"app__stats\">\n          {/* InfoBox  title = CoronaVirus cases*/}\n            <InfoBox isRedactive={casesType ===\"cases\"} onClick={e=> setCasesType(\"cases\")}   title=\"Coronavirus cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\n          {/* InfoBox title = Coronavirus recoveries */}\n            <InfoBox active={casesType ===\"recovered\"} onClick={e=> setCasesType(\"recovered\")}   title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}/>\n          {/* InfoBox title= corona deaths*/}\n            <InfoBox active={casesType ===\"deaths\"} onClick={e=> setCasesType(\"deaths\")}   title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\n        </div>\n\n\n        {/* Map */}\n        <Map\n        casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n\n        />\n      </div>\n\n      {/* Application Left Side */}\n      <Card className=\"app__right\">\n        <CardContent>\n          {/* Table */}\n          <h1>Live Cases By Country</h1>\n          <Table countries={tableData}/>\n          {/* Graph */} \n          <h3>Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType}/>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}